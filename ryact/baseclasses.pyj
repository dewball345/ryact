# @external
import random
# from __python__ import bound_methods

def cre(elem, attrs, children=[]):
    '''
    Function to create dom trees in ryact. 

    ...

    Parameters
    ----------
    elem : HTML element
        This is the element that will have the children in it
    
    attrs: Dict
        This is a dictionary of attributes

    children: List[HTML element]
        This is the children that will be added

    Returns
    -------
    HTML Element
        Combined element with parent and children
    '''

    element = document.createElement(elem)
    for attr in Object.keys(attrs):
        # print(attr, attrs[attr])
        # element[attr] = attrs[attr]
        if attr == "innerText" or attr == "innerHTML" or attr=="onclick" or attr=="onchange":
            element[attr] = attrs[attr]
        else:    
            element.setAttribute(attr, attrs[attr])
    # print()
    for child in children:
        element.appendChild(child)
    return element

def css(cssObject):
    '''
    Converts a css dictionary into a style string. This is mostly syntatic sugar.

    ...

    Parameters
    ----------
    cssObject : Dict
        This is the element that will have the children in it

    Returns
    -------
    String
        Css string
    '''

    compiledString = ""
    for obj in Object.keys(cssObject):
        string = obj + ":" + cssObject[obj] + ";"
        compiledString += string

    # print(compiledString)
    return compiledString

# def run_app(component, divId="root"):
#     print(component)
#     document.getElementById(divId).appendChild(component)

class Base:
    '''
    The Base(as mentioned in the class name) class, the one which all stateless and stateful components come from

    ...

    Attributes
    ----------
    You can pass props through the constructor. This is optional; no props need to be passed for this to work

    Methods
    -------
    render() -> an HTML element
        Initial rendering of content
    '''
    def render(self):
        pass

class GenerateContainers:
    '''
    Class is used to generate containers that are identified and dom-diffed during setState()

    ...

    Attributes
    ----------
    self.outerId : str
        The id of the first identifier in setState. 

    self.innerId : str
        The id of the second identifier in setState. 

    self.container: html.DIV
        This is the first identifier in setState. Breact uses a simple 
        getElementById to access this container. The content container
        resides in here

    self.content: html.DIV
        This is the second identifier in setState, and holds the main 
        content. This container is dom-diffed in the StatefulSegment
        class or deleted and reupdated in the OLD_StatefulSegment class

    Methods
    -------
    None
    '''

    def __init__(self):
        self.outerId = "id" + random.randint(1, 9999999999).toString()
        self.innerId = "id" + random.randint(1, 9999999999).toString()
        self.container = cre("div", {"id": self.outerId})
        self.content = cre("div", {"id": self.innerId})


class StatefulSegment(Base):
    '''
    Class is used for stateful components. Content in here is meant to be changed. 

    ...

    Attributes
    ----------
    You can pass props through the constructor, though this is optional

    Methods
    -------
    render() -> HTML Element
        Initial render of StatefulSegment

    update() -> HTML Element
        New content that will be placed when state changes.

    setState() -> None
        Changes states and updates DOM by first identifying container that needs to be changed and dom-diffing
    '''

    def __init__(self):
        self.oi = GenerateContainers()
        self.state = {}
        rebind_all(self)
    def render(self):
        self.oi.content.replaceChildren(self.update())
        self.oi.container.replaceChildren(self.oi.content)
        return self.oi.container
    def update(self):
        pass
    def setState(self, attrs, one_state_change=False):
        for attr in Object.keys(attrs):
            self.state[attr] = attrs[attr]
        # if(len(Object.keys(attrs)) > 0):
        #     self.state.update(attrs)

        #REMOVED COPY DETECTION, CODE DOESN'T WORK
        # print("HERE")
        # if(len(attrs.keys()) > 0 and not disable_copy):
        #     print(attrs.keys())
        #     state_copy = str(self.state)
        #     self.state.update(attrs)
        #     if str(self.state) == state_copy:
        #         print("SAME", self.state, state_copy)
        #         return;
        #fix setState not executing bug, check cre() method
        # print("reach") 
        # print("HERE 53")
        print("executed")
        def find_diffs(o, n, op):
            oldChildren = Array.from(o)
            newChildren = Array.from(n)
            # print("NEW CHILDREN")
            # print(Array.from(newChildren))
            # print("OLD CHILDREN")
            # print(Array.from(oldChildren))
            for i in range(min(len(oldChildren), len(newChildren))):
                if(oldChildren[i] == newChildren[i]):
                    # print(oldChildren[i].toString(), newChildren[i].toString(), oldChildren[i] == newChildren[i])
                    print("they're the same thing!")
                    if(len(oldChildren[i].children) == 0 and len(newChildren[i].children) == 0):
                        if(oldChildren[i].innerHTML != newChildren[i].innerHTML):
                            oldChildren[i].innerHTML = newChildren[i].innerHTML
                    else:
                        find_diffs(oldChildren[i].children, newChildren[i].children, oldChildren[i])
                elif(oldChildren[i] != newChildren[i]):
                    # print((oldChildren[i]).toString(), "not_equal_to", (newChildren[i]).toString())
                    oldChildren[i].parentNode.replaceChild(newChildren[i], oldChildren[i])
            # print("Line 75")
            
            if len(newChildren) > len(oldChildren):
                
                for i in newChildren[len(oldChildren):]:
                    # print("APPEND")
                    # print((i).toString())
                    op.appendChild(i)
            elif len(oldChildren) > len(newChildren):
                for i in oldChildren[len(newChildren):]:
                    # print("REVOKE")
                    # print((i).toString())
                    i.remove()
        old = document.getElementById(self.oi.innerId).children
        update = self.update(one_state_change)
        uChildren = [update]
        find_diffs(old, uChildren, document.getElementById(self.oi.innerId))

class OLD_StatefulSegment(Base):
    '''
    Former class for stateful components. Content in here is meant to be changed. 
    The difference between this and the new one is that there is no dom-diffing here. Content is simply removed and replaced.
    For Big stateful components, this can be a burden. If the new class doesn't work for you, please use this one.
    Also, feel free to submit an issue or pr.

    ...

    Attributes
    ----------
    You can pass props through the constructor, though this is optional

    Methods
    -------
    render() -> HTML Element
        Initial render of StatefulSegment

    update() -> HTML Element
        New content that will be placed when state changes.

    setState() -> None
        Changes states and updates DOM by first identifying container that needs to be changed and removing/replacing them
    '''

    def __init__(self):
        self.oi = GenerateContainers()
        self.state = {}
        rebind_all(self)
    def render(self):
        # document.getElementById(self.oi.outerId).remove()
        # document.getElementById(self.oi.innerId).remove()

        # print("RENDERED")
        self.oi.content.replaceChildren(self.update())
        self.oi.container.replaceChildren(self.oi.content)
        return self.oi.container
    def update(self):
        pass
    def setState(self, attrs, one_state_change=False):
        # print("SETSTATE")
        for attr in Object.keys(attrs):
            self.state[attr] = attrs[attr]
        document.getElementById(self.oi.innerId).remove()
        self.oi.content = cre("div", {"id": self.oi.innerId})
        self.oi.content.appendChild(self.update(one_state_change))
        document.getElementById(self.oi.outerId).appendChild(self.oi.content)

class Link(Base):
    '''
    A link class for router. Similar to HTML <a> tag but for client-side routing

    ...

    Attributes
    ----------
    link : str
        The path that it will navigate to

    Methods
    -------
    render() -> HTML Element
        Initial render of Link element
    '''

    def __init__(self, link):
        self.link = link
        rebind_all(self)
    def render(self, child):
        def link(e):
            window.location.hash = "#" + self.link
        child.onclick = link
        return child

class Redirect(Base):
    '''
    A redirect class for router. 

    ...

    Attributes
    ----------
    link : str
        The path that it will navigate to

    Methods
    -------
    render() -> None
        Initial render of Redirect element
    '''
    def __init__(self, link):
        self.link = link
        rebind_all(self)
    def render(self):
        window.location.hash = self.link

#TODO: add prefix to router to prevent redundancy
#TODO: global routes?

class Router(StatefulSegment):
    '''
    Router class. This allows client side routing.

    ...

    Attributes
    ----------
    routes : Dict
        a dictionary of routes and their corresponding components

    err_component: Base or StatefulSegment or OLD_StatefulSegment
        if something wrong happens this component will show up. If this error is 
        because of the source code, file an issue or pr on github.

    Methods
    -------
    findComponentByPath(path: str) -> Base or StatefulSegment or OLD_StatefulSegment
        Finds the corresponding component for router path

    updateHash() -> None
        Rerenders components when hash url changed.

    render() -> HTML Element
        Initial render of Link element

    render() -> HTML Element
        Initial render of Link element

    update() -> HTML Element
        Return new component for route. 
    '''

    def __init__(self, routes, err_component):
        self.oi = GenerateContainers()
        # self.state = {"home": "/"}
        self.routes = routes
        self.err_component = err_component
        rebind_all(self)
        
    def findComponentByPath(self, path):
        if path in self.routes:
            return self.routes[path]
        else:
            return None
    def updateHash(self, window, e):
        self.setState({})
    def render(self, updater):
        self.oi.content.replaceChildren(self.update())
        self.oi.container.replaceChildren(self.oi.content)
        window.onload = updater
        window.onhashchange = updater
        return self.oi.container
    def update(self, one_state_change=False):
        path = window.location.hash[1:]
        if path == "":
            window.location.hash = "#/"
            path = "/"
        component = self.findComponentByPath(path)
        if component == None:
            component = self.err_component
        comp = component()
        return comp
